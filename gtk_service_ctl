#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import pygtk
pygtk.require('2.0')
import gtk
import config

class ServiceControl:
    def __init__(self, title):
        self.title = title
        self.tray = gtk.StatusIcon()
        self.tray.set_from_stock(gtk.STOCK_YES)
        self.tray.connect('activate', self.on_click)
        self.tray.connect('popup-menu', self.on_r_click)
        self.tray.set_tooltip(title)

    def debug(self, button):
        print self.model

    #################
    ## EVENTS HANDLE
    #################
    def on_click(self, widget):
        if hasattr(self, 'window'):
            if self.window.get_property("visible"):
                self.hide()
            else:
                self.show() 
        else:
            self.make()
            self.show()

    def on_r_click(self, icon, event_button, event_time):
        self.menu(event_button, event_time)

    def on_selection_changed(self, treeselection):
        (model, iter) = treeselection.get_selected()
        self.current_iter = iter
        self.current_path = model.get_path(iter)
        self.current_state = model.get_value(iter, 0)
        self.current_service = model.get_value(iter, 1)
        self._buttons_toogle(self.current_state)
        # print [self.current_path, self.current_state, self.current_service]

    ###########
    ## ACTIONS
    ###########
    def make(self):
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_title(self.title)
        self.window.set_border_width(10)

        vbox_left = gtk.VBox()
        vbox_right = gtk.VBox(False, 3)
        hbox = gtk.HBox()

        scrolledbox = gtk.ScrolledWindow()
        scrolledbox.set_policy( gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
        scrolledbox.set_size_request(250, 200)

        self.model = gtk.ListStore(bool, str) #@+

        for service in config.services:
            cmd = "systemctl is-active %s.service" % (service,)
            out = os.popen(cmd).read().strip()
            if out == 'active':
                state = True
            else:
                state = False
            self.model.append([state, service])

        # Treeview
        self.treeview = gtk.TreeView(self.model) #@+
        treeselection = self.treeview.get_selection()
        treeselection.connect("changed", self.on_selection_changed)

        # State column
        col = gtk.TreeViewColumn("State")
        self.cell = gtk.CellRendererPixbuf()
        col.pack_start(self.cell, expand=False)
        col.set_cell_data_func(self.cell, self._render_icon)
        self.treeview.insert_column(col, 0)

        # Service column
        col = gtk.TreeViewColumn("Service")
        self.treeview.append_column(col)
        cell = gtk.CellRendererText()
        col.pack_start(cell, expand=False)
        col.set_attributes(cell, text=1)
        col.set_sort_column_id(1)

        scrolledbox.add(self.treeview)

        self.start_btn = gtk.Button("Start")
        self.start_btn.connect_object("clicked", self.service_start, self.window)
        self.start_btn.set_sensitive(False)
        vbox_right.pack_start(self.start_btn, False)

        self.restart_btn = gtk.Button("Restart")
        self.restart_btn.connect_object("clicked", self.service_restart, self.window)
        self.restart_btn.set_sensitive(False)
        vbox_right.pack_start(self.restart_btn, False)

        self.stop_btn = gtk.Button("Stop")
        self.stop_btn.connect_object("clicked", self.service_stop, self.window)
        self.stop_btn.set_sensitive(False)
        vbox_right.pack_start(self.stop_btn, False)

        align = gtk.Alignment(1, 0, 0, 0)
        align.add(vbox_right)
        align.set_padding(0, 0, 10, 0)

        vbox_left.pack_start(scrolledbox, False)

        hbox.add(vbox_left)
        hbox.add(align)

        self.window.add(hbox)

    def update(self):
        treeselection = self.treeview.get_selection()
        cmd = "systemctl is-active %s.service" % (self.current_service,)
        out = os.popen(cmd).read().strip()
        if out == 'active':
            state = True
        else:
            state = False
        self.model.set_value(self.current_iter, 0, state)
        self._render_icon(0, self.cell, self.model, self.current_iter)
        self.on_selection_changed(treeselection)
        
    def show(self):
        self.window.show_all()

    def hide(self):
        self.window.hide()

    def menu(self, event_button, event_time):
        menu = gtk.Menu()

        about = gtk.MenuItem("About")
        about.connect('activate', self.about)
        about.show()
        menu.append(about)

        quit = gtk.MenuItem("Quit")
        quit.connect('activate', gtk.main_quit)
        quit.show()
        menu.append(quit)

        menu.popup(None, None, gtk.status_icon_position_menu,
                   event_button, event_time, self.tray)

    def about(self, widget):
        about_dialog = gtk.AboutDialog()
        about_dialog.set_destroy_with_parent (True)
        about_dialog.set_icon_name ("GTK Service Control")
        about_dialog.set_name('GTK Service Control')
        about_dialog.set_version('0.2')
        about_dialog.set_copyright("(C) 2016 Stanislav Tamat")
        about_dialog.set_comments(("GUI program to control system services"))
        about_dialog.set_authors(['Stanislav Tamat <libastral.so@yandex.ru>'])
        about_dialog.run()
        about_dialog.destroy()

    #######
    ## CMD
    #######
    def service_start(self, widget):
        cmd = "systemctl start %s.service" % (self.current_service,)
        out = os.popen(cmd).read().strip()
        print out
        self.update()

    def service_restart(self, widget):
        cmd = "systemctl restart %s.service" % (self.current_service,)
        out = os.popen(cmd).read().strip()
        print out
        self.update()

    def service_stop(self, widget):
        cmd = "systemctl stop %s.service" % (self.current_service,)
        out = os.popen(cmd).read().strip()
        print out
        self.update()

    ########
    ## MISC
    ########
    def _render_icon(self, column, cell, model, iter):
        data = self.model.get_value(iter, 0)   
        if data == True:
            stock = gtk.STOCK_YES
        else:
            stock = gtk.STOCK_NO
        pixbuf = self.window.render_icon(stock_id=stock, size=gtk.ICON_SIZE_MENU)
        cell.set_property('pixbuf', pixbuf)

    def _buttons_toogle(self, state):
        if state:
            self.start_btn.set_sensitive(False)
            self.restart_btn.set_sensitive(True)
            self.stop_btn.set_sensitive(True)
        else:
            self.start_btn.set_sensitive(True)
            self.restart_btn.set_sensitive(False)
            self.stop_btn.set_sensitive(False)

    ########
    ## MAIN
    ########
    def main(self):
        # All PyGTK applications must have a gtk.main(). Control ends here
        # and waits for an event to occur (like a key press or mouse event).
        gtk.main()

if __name__ == "__main__":
    servicecontrol = ServiceControl("GTK Service Control")
    if config.settings["start_show"]:
        servicecontrol.make()
        servicecontrol.show()
    servicecontrol.main()
    