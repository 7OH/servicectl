#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import config
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk

APPIND_SUPPORT = True

try:
	gi.require_version('AppIndicator3', '0.1')
	from gi.repository import AppIndicator3
except:
	APPIND_SUPPORT = False

class ServiceControl:
	def __init__(self, title):
		icontheme = Gtk.IconTheme.get_default()
		self.icon = icontheme.load_icon(Gtk.STOCK_PROPERTIES, 128, 0)
		self.title = title
		self.menu = Gtk.Menu()

		if APPIND_SUPPORT:
			self.tray = AppIndicator3.Indicator.new("gtk_service_ctl", Gtk.STOCK_PROPERTIES, AppIndicator3.IndicatorCategory.SYSTEM_SERVICES)
			self.tray.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
			self.add_menu_item(self.on_click, "Show/Hide")
			self.tray.set_menu(self.menu)
			self.tray.set_title(title)
		else:
			self.tray = Gtk.StatusIcon()
			self.tray.set_from_stock(Gtk.STOCK_PROPERTIES)
			self.tray.connect('activate', self.on_click)
			self.tray.connect('popup-menu', self.on_r_click)
			self.tray.set_tooltip_text(title)

		self.add_menu_item(self.about, "About")
		self.add_menu_item(Gtk.main_quit, "Quit")
		self.make()

	#################
	## EVENTS HANDLE
	#################

	def on_click(self, w):
		if self.window.get_property("visible"):
			self.hide()
		else:
			self.show()

	def on_r_click(self, icon, button, time):
		self.get_tray_menu()

		def pos(menu, aicon):
			return (Gtk.StatusIcon.position_menu(menu, aicon))

		self.menu.popup(None, None, pos, icon, button, time)

	def on_selection_changed(self, treeselection):
			(model, iter) = treeselection.get_selected()
			self.current_iter = iter
			self.current_path = model.get_path(iter)
			self.current_state = model.get_value(iter, 0)
			self.current_service = model.get_value(iter, 1)
			self._buttons_toogle(self.current_state)

	###########
	## ACTIONS
	###########
	def make(self):
		self.window = Gtk.Window()
		self.window.set_default_icon(self.icon)
		self.window.set_title(self.title)
		self.window.set_border_width(10)

		def hide_window(w):
			self.hide()

		headerbar = Gtk.HeaderBar()
		headerbar.set_show_close_button(False)
		headerbar.set_title(self.title)

		hide_btn_image = Gtk.Image.new_from_icon_name("window-close-symbolic", Gtk.IconSize.MENU)
		hide_btn = Gtk.Button(image=hide_btn_image)
		hide_btn.connect_object("clicked", hide_window, self.window)

		headerbar.pack_end(hide_btn)

		vbox_left = Gtk.VBox()
		vbox_right = Gtk.VBox(False, 3)
		hbox = Gtk.HBox()

		scrolledbox = Gtk.ScrolledWindow()
		scrolledbox.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
		scrolledbox.set_size_request(250, 200)

		self.model = Gtk.ListStore(bool, str)

		for service in config.services:
			cmd = "systemctl is-active %s.service" % (service,)
			out = os.popen(cmd).read().strip()
			if out == 'active':
				state = True
			else:
				state = False
			self.model.append([state, service])

		# Treeview
		self.treeview = Gtk.TreeView(self.model)
		treeselection = self.treeview.get_selection()
		treeselection.connect("changed", self.on_selection_changed)

		# State column
		col = Gtk.TreeViewColumn("State")
		self.cell = Gtk.CellRendererPixbuf()
		col.pack_start(self.cell, expand=False)
		col.set_cell_data_func(self.cell, self._render_icon)
		self.treeview.insert_column(col, 0)

		# Service column
		col = Gtk.TreeViewColumn("Service")
		self.treeview.append_column(col)
		cell = Gtk.CellRendererText()
		col.pack_start(cell, expand=False)
		col.set_attributes(cell, text=1)
		col.set_sort_column_id(1)

		scrolledbox.add(self.treeview)

		vbox_left.pack_start(scrolledbox, False, False, 5)

		self.start_btn = Gtk.Button("Start")
		self.start_btn.connect_object("clicked", self.service_start, self.window)
		self.start_btn.set_sensitive(False)
		vbox_right.pack_start(self.start_btn, False, False, 0)

		self.restart_btn = Gtk.Button("Restart")
		self.restart_btn.connect_object("clicked", self.service_restart, self.window)
		self.restart_btn.set_sensitive(False)
		vbox_right.pack_start(self.restart_btn, False, False, 0)

		self.stop_btn = Gtk.Button("Stop")
		self.stop_btn.connect_object("clicked", self.service_stop, self.window)
		self.stop_btn.set_sensitive(False)
		vbox_right.pack_start(self.stop_btn, False, False, 0)

		vbox_align = Gtk.Alignment()
		vbox_align.add(vbox_right)
		vbox_align.set_padding(0, 0, 10, 0)

		hbox.add(vbox_left)
		hbox.add(vbox_align)

		self.window.set_titlebar(headerbar)
		self.window.add(hbox)

	def update(self):
		treeselection = self.treeview.get_selection()
		cmd = "systemctl is-active %s.service" % (self.current_service,)
		out = os.popen(cmd).read().strip()
		if out == 'active':
			state = True
		else:
			state = False
		icon = self.cell.get_property('pixbuf')
		self.model.set_value(self.current_iter, 0, state)
		self._render_icon(0, self.cell, self.model, self.current_iter, icon)
		self.on_selection_changed(treeselection)

	def show(self):
		self.window.show_all()

	def hide(self):
		self.window.hide()

	def add_menu_item(self, command, title):
		aMenuitem = Gtk.MenuItem()
		aMenuitem.set_label(title)
		aMenuitem.connect("activate", command)

		self.menu.append(aMenuitem)
		self.menu.show_all()

	def get_tray_menu(self):
		return self.menu

	def about(self, w):
		website = "https://github.com/YokiToki/gtk_service_ctl"
		about = Gtk.AboutDialog()
		about.set_destroy_with_parent(True)
		about.set_name(self.title)
		about.set_version("v0.3")
		about.set_copyright("(C) 2016 Stanislav Tamat")
		about.set_comments("GUI tray program to control system services")
		about.set_website(website)
		about.set_website_label(website)
		about.set_authors(["Stanislav Tamat <libastral.so@yandex.ru>"])
		about.run()
		about.destroy()

	#######
	## CMD
	#######
	def service_start(self, w):
		cmd = "systemctl start %s.service" % (self.current_service,)
		out = os.popen(cmd).read().strip()
		print out
		self.update()

	def service_restart(self, w):
		cmd = "systemctl restart %s.service" % (self.current_service,)
		out = os.popen(cmd).read().strip()
		print out
		self.update()

	def service_stop(self, w):
		cmd = "systemctl stop %s.service" % (self.current_service,)
		out = os.popen(cmd).read().strip()
		print out
		self.update()

	########
	## MISC
	########
	def _render_icon(self, column, cell, model, iter, icon):
		data = self.model.get_value(iter, 0)
		if data == True:
			stock = Gtk.STOCK_YES
		else:
			stock = Gtk.STOCK_NO

		pixbuf = self.window.render_icon(stock, Gtk.IconSize.MENU)
		cell.set_property('pixbuf', pixbuf)

	def _buttons_toogle(self, state):
		if state:
			self.start_btn.set_sensitive(False)
			self.restart_btn.set_sensitive(True)
			self.stop_btn.set_sensitive(True)
		else:
			self.start_btn.set_sensitive(True)
			self.restart_btn.set_sensitive(False)
			self.stop_btn.set_sensitive(False)

	def main(self):
		Gtk.main()

if __name__ == '__main__':
	app = ServiceControl("GTK Service Control")
	if config.settings["start_show"]:
		app.show()
	app.main()
