#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import gtk
import config

class ServiceControl:
    def __init__(self):
        self.tray = gtk.StatusIcon()
        self.tray.set_from_stock(gtk.STOCK_YES)
        self.tray.connect('activate', self.on_click)
        self.tray.connect('popup-menu', self.on_r_click)
        self.tray.set_tooltip(('GTK Service Control'))

    def debug(self, button):
        print self.window

    #################
    ## EVENTS HANDLE
    #################
    def on_click(self, widget):
        if hasattr(self, 'window'):
            if self.window.get_property("visible"):
                self.window.hide()
            else:
                self.show_main_window() 
        else:
            self.make_main_window()
            self.show_main_window()

    def on_r_click(self, icon, event_button, event_time):
        self.make_rc_menu(event_button, event_time)

    ###########
    ## ACTIONS
    ###########
    def make_main_window(self):
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_border_width(10)
        
    def show_main_window(self):
        self.mainbox = gtk.ScrolledWindow()
        self.mainbox.set_policy( gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
        self.window.add(self.mainbox)

        self.model = gtk.ListStore(bool, str) #@+

        for service in config.services:
            cmd = "systemctl is-active %s.service" % (service,)
            out = os.popen(cmd).read().strip()
            if out == 'active':
                state = True
            else:
                state = False
            self.model.append([state, service])

        # Treeview
        self.treeview = gtk.TreeView(self.model) #@+

        # State column
        col = gtk.TreeViewColumn( "State")
        self.treeview.insert_column(col, 0)
        cell = gtk.CellRendererPixbuf()
        col.pack_start(cell, expand=False)
        col.set_cell_data_func(cell, self._render_icon)

        # Service column
        col = gtk.TreeViewColumn( "Service")
        self.treeview.append_column(col)
        cell = gtk.CellRendererText()
        col.pack_start(cell, expand=False)
        col.set_attributes(cell, text=1)
        col.set_sort_column_id(1)

        # Controls column
        col = gtk.TreeViewColumn( "Controls")
        self.treeview.append_column(col)

        self.mainbox.set_size_request(250, 200)
        self.mainbox.add(self.treeview)
        
        self.window.show_all()

    def make_rc_menu(self, event_button, event_time):
        menu = gtk.Menu()

        about = gtk.MenuItem("About")
        about.connect('activate', self.make_about_dialog)
        about.show()
        menu.append(about)

        quit = gtk.MenuItem("Quit")
        quit.connect('activate', gtk.main_quit)
        quit.show()
        menu.append(quit)

        menu.popup(None, None, gtk.status_icon_position_menu,
                   event_button, event_time, self.tray)

    def  make_about_dialog(self, widget):
        about_dialog = gtk.AboutDialog()
        about_dialog.set_destroy_with_parent (True)
        about_dialog.set_icon_name ("GTK Service Control")
        about_dialog.set_name('GTK Service Control')
        about_dialog.set_version('0.1')
        about_dialog.set_copyright("(C) 2016 Stanislav Tamat")
        about_dialog.set_comments(("GUI program to control system services"))
        about_dialog.set_authors(['Stanislav Tamat <libastral.so@yandex.ru>'])
        about_dialog.run()
        about_dialog.destroy()

    ########
    ## MISC
    ########

    def _render_icon(self, column, cell, model, iter):
        data = self.model.get_value(iter, 0)   
        if data == True:
            stock = gtk.STOCK_YES
        else:
            stock = gtk.STOCK_NO
        pixbuf = self.window.render_icon(stock_id=stock, size=gtk.ICON_SIZE_MENU)
        cell.set_property('pixbuf', pixbuf)

    ########
    ## MAIN
    ########
    def main(self):
        # All PyGTK applications must have a gtk.main(). Control ends here
        # and waits for an event to occur (like a key press or mouse event).
        gtk.main()

if __name__ == "__main__":
    servicecontrol = ServiceControl()
    servicecontrol.main()